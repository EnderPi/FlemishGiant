- Allow user to browse seed effects
- Split out colors of different bytes in randomness visual
- configure said colors and such
- configure tests
- allow arbitrary output or state functions (expression)
- allow arbitrary restrictions, like "must include XOR"
- unit test for randomHash - trivial pass GCD and gorilla test
- push the round function of the cryptographic has harder - see when, if at all, it fails as a 64-bit hash RNG
- Allow user to make custom tournament probabilities, even negative selection
- species explorer (view graph, specs, failes/passed tests)
- add nextlong to randomnumbergeenerator API (divide ulong by 2, reflect it?)
- Add special functions?
- remove cost from the treenode class, needs to be abstracted as a visitor class.
- Animator for seed changes in species explorer - set min, set max, roll.....
- Increase unit test coverage
- save/load
- warn on close
- change up for 32-bit rngs?
- get constants, like birthday empirical, uniformity, etc
- overall stats on operations, node counts, etc.
- Clear results on start.
- Make variable stopping criteria - elitism, total number of generation, etc
- configure max nodes for validity
- Split up the tabs to be separate controls.
- Add mode to program cleaner for hash mode
- add button to display C# class - whole thing - for 8099.
- Add configuration for 8099 program length.
- Add context to addinitial genes method, for amount to add + things that can add.
- generation stats - number of nodes by type
- add ability to test multiple seeds in testing
- consolidate nameconstants method into one place
- make a feistel type that has a non-hash state transition function
- make 32 bit tests and 32->32 rngs
- make 64->32 rngs
- add option to force bijection only code.
- add xorshiftright, xorshiftleft command
- also add addshiftright, addshiftleft commands
- get folding running right for 32 bit trees
- Deal with cryptographicHash2
- Deal with endian-ness issue in endercryption
- Make fitness stop at reasonably round numbers
- While randomness test running, display current p-values and graphic
- Make hash work correctly for byte stream imho
- Make 8099 Program cleaner combine multiplies
- Make pseudo random function code (keyed hash, diff strong on key changes)
- Store all comptetitors to elite (so, specimens with peak fitness and equal cost), allow inspection.  Need to find a good hash and this is the way.
- Calculate unique failure modes - when a given test was the only failure mechanism